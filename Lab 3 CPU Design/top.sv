// TODO need the .sv file so i can instantiate the contorl unit lmao

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top (

        //////////// CLOCK //////////
        input                                   CLOCK_50,
        input                                   CLOCK2_50,
        input                                   CLOCK3_50,

        //////////// LED //////////
        output               [8:0]              LEDG,
        output              [17:0]              LEDR,

        //////////// KEY //////////
        input                [3:0]              KEY,

        //////////// SW //////////
        input               [17:0]              SW,

        //////////// SEG7 //////////
        output               [6:0]              HEX0,
        output               [6:0]              HEX1,
        output               [6:0]              HEX2,
        output               [6:0]              HEX3,
        output               [6:0]              HEX4,
        output               [6:0]              HEX5,
        output               [6:0]              HEX6,
        output               [6:0]              HEX7
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

        // ??? i dont udnerstand  

        /* 24 bit clock divider, converts 50MHz clock signal to 2.98Hz */
        logic [23:0] clkdiv;
        logic ledclk;
        assign ledclk = clkdiv[23];

        /* driver for LEDs */
        logic [25:0] leds;
        assign LEDR = leds[25:8];
        assign LEDG = leds[7:0];  // update this to actually match the hardware 

        /* LED state register, 0 means going left, 1 means going right */
        logic ledstate;

// HEX DRIVERS instantiations 
hexdriver hex (.val(SW[3:0]), .HEX(HEX0)); /* Instance of module */
hexdriver hex1 (.val(SW[7:4]), .HEX(HEX1)); /* Instance of module */
hexdriver hex2 (.val(SW[11:8]), .HEX(HEX2)); /* Instance of module */
hexdriver hex3 (.val(SW[15:12]), .HEX(HEX3)); /* Instance of module */
hexdriver hex4 (.val({2'b00, SW[17:16]}), .HEX(HEX4)); /* Instance of module */

/* hardcoding switches w/ 0s into last couple displays, which aren't accessible by switches. */
hexdriver hex5 (.val(4'b0000), .HEX(HEX5)); /* Instance of module */ 
hexdriver hex6 (.val(4'b0000), .HEX(HEX6)); /* Instance of module */
hexdriver hex7 (.val(4'b0000), .HEX(HEX7)); /* Instance of module */

// CPU 
cpu my_cpu(
        .clk(CLOCK_50),  // also active low button, so we invert it 
        .res(~KEY[0]),  // reset by pressing first button, rubric says this *i think*
        .gpio_in(SW[17:0]), // 18 bit signal from board, need to match in cpu. 
        .gpio_out() 
); 


//=======================================================
//  Behavioral coding
//=======================================================


        initial begin
                clkdiv = 26'h0;
                /* start at the far right, LEDG0 */
                leds = 26'b1;
                /* start out going to the left */
                ledstate = 1'b0;
        end

        always @(posedge CLOCK_50) begin
                /* drive the clock divider, every 2^26 cycles of CLOCK_50, the
                * top bit will roll over and give us a clock edge for clkdiv
                * */
                clkdiv <= clkdiv + 1;
        end

        always @(posedge ledclk) begin
                /* going left and we are at the far left, time to turn around */
                if ( (ledstate == 0) && (leds == 26'b10000000000000000000000000) ) begin
                        ledstate <= 1;
                        leds <= leds >> 1;

                /* going left and not at the far left, keep going */
                end else if (ledstate == 0) begin
                        ledstate <= 0;
                        leds <= leds << 1;

                /* going right and we are at the far right, turn around */
                end else if ( (ledstate == 1) && (leds == 26'b1) ) begin
                        ledstate <= 0;
                        leds <= leds << 1;

                /* going right, and we aren't at the far right */
                end else begin
                        leds <= leds >> 1;
                end
        end

endmodule
